- name: Create /root/bin
  file: dest=/root/bin  state=directory owner=root group={{rootGroup}} mode=0700

- name: Create /root/sbin
  file: dest=/root/sbin state=directory owner=root group={{rootGroup}} mode=0700

- name: Update and upgrade linux packages
  apt:
    upgrade: "yes"
    update_cache: yes
    cache_valid_time: 60
  when: ansible_os_family == 'Debian' or ansible_os_family == 'Ubuntu'

- name: Install packages
  ansible.builtin.package:
    name: ['python3','mc','screen','tcpdump','nmap','psmisc','whois','curl','vim','sudo','ntp','bash','bash-completion','nload','tcptrack','iftop','groff']
    state: present
    autoremove: yes

- name: Install additional linux packages
  ansible.builtin.package:
    name: ['locales-all','aptitude','telnet','traceroute','dnsutils','ethtool','dsniff','apt-transport-https','ca-certificates','software-properties-common','man','gnupg-agent','dstat','net-tools','bsd-mailx']
    state: present
    autoremove: yes
  when: ansible_os_family == 'Debian' or ansible_os_family == 'Ubuntu'

- name: Clean apt
  apt:
    autoremove: yes
    purge: yes
  when: ansible_os_family == 'Debian' or ansible_os_family == 'Ubuntu'

- name: Deploy templates
  template:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
    mode: "{{item.mode}}"
    owner: "{{item.owner}}"
    group: "{{item.group}}"
    decrypt: "{{item.decrypt}}"
  with_items:
    - { src: "rc.local.j2",        dest: "/etc/rc.local",                    mode: "0755", owner: "root", group: "{{rootGroup}}", decrypt: "no" }
    - { src: "sudoers.j2",         dest: "{{mainETC}}/sudoers",              mode: "0440", owner: "root", group: "{{rootGroup}}", decrypt: "no" }
    - { src: "sudoers.manager.j2", dest: "{{mainETC}}/sudoers.d/10-manager", mode: "0440", owner: "root", group: "{{rootGroup}}", decrypt: "no" }
    - { src: "sshd_config.j2",     dest: "/etc/ssh/sshd_config",             mode: "0644", owner: "root", group: "{{rootGroup}}", decrypt: "no" }
    - { src: "bsd/rc.conf.j2",     dest: "/etc/rc.conf",                     mode: "0644", owner: "root", group: "{{rootGroup}}", decrypt: "no" }

- name: Create manager user group
  group:
    name: "{{managerGroup}}"
    system: no
    gid: "{{managerGID}}"
    state: present

- name: Create sudo group
  group:
    name: sudo
    system: no
    gid: 27
    state: present
  when: ansible_os_family == 'FreeBSD'

- name: Create manager user
  user:
    name: "{{managerName}}"
    uid: "{{managerUID}}"
    group: "{{managerGroup}}"
    home: "{{usersHomeFolder}}/{{managerName}}"
    shell: "{{usersDefShell}}"
    state: present

- name: Correct permissiona manager user home
  command: chown -R "{{managerName}}:{{managerGroup}}" "{{usersHomeFolder}}/{{managerName}}"
  changed_when: false

- name: Install authorized_keys for manager user
  authorized_key:
    user: "{{managerName}}"
    key: "{{ lookup('file','authorized_keys') }}"

- name: Install authorized_keys for root user
  authorized_key:
    user: root
    key: "{{ lookup('file','authorized_keys') }}"

- name: Add manager user to group 'root/wheel'
  user:
    name: "{{managerName}}"
    append: yes
    groups: "{{rootGroup}}"
    create_home: no

- name: Add manager user to group 'sudo'
  user:
    name: "{{managerName}}"
    append: yes
    groups: sudo
    create_home: no

- name: Stop exim4
  shell: systemctl stop exim4
  ignore_errors: true
  changed_when: false
  when: ansible_os_family == 'Debian' or ansible_os_family == 'Ubuntu'

- name: Disable exim4
  shell: systemctl disable exim4
  ignore_errors: true
  changed_when: false
  when: ansible_os_family == 'Debian' or ansible_os_family == 'Ubuntu'

- name: Restart ssh server
  ansible.builtin.service:
    name: "{{sshService}}"
    state: restarted
